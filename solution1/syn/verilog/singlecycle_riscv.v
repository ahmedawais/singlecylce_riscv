// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="singlecycle_riscv,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.494000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=28,HLS_SYN_LUT=172}" *)

module singlecycle_riscv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        startingInst_V,
        startingInst_V_ap_vld,
        startingInst_V_ap_ack,
        immediate_V,
        immediate_V_ap_vld,
        immediate_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] startingInst_V;
input   startingInst_V_ap_vld;
output   startingInst_V_ap_ack;
input  [5:0] immediate_V;
input   immediate_V_ap_vld;
output   immediate_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] pProgramCounter_name_1;
reg   [5:0] pProgramCounter_form_1;
reg   [6:0] pProgramCounter_entr_1;
wire   [3:0] instSet_entryIndex_V_address0;
reg    instSet_entryIndex_V_ce0;
wire   [2:0] instSet_entryIndex_V_q0;
wire   [3:0] i_1_fu_105_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_99_p2;
reg   [3:0] i_reg_80;
wire  signed [63:0] gepindex220_cast_fu_189_p1;
wire   [4:0] mem_index_gep_fu_115_p2;
wire   [5:0] mem_index_gep2_fu_121_p2;
wire    ap_CS_fsm_state3;
wire   [6:0] mem_index_gep4_fu_127_p2;
wire   [7:0] adjSize14_cast_fu_151_p1;
wire   [0:0] addrCmp2_fu_155_p2;
wire   [7:0] gepindex1_fu_167_p2;
wire   [0:0] addrCmp3_fu_161_p2;
wire   [7:0] gepindex2_fu_173_p3;
wire   [7:0] gepindex3_fu_181_p3;
wire   [1:0] merge_i_i_fu_246_p5;
wire   [6:0] merge_i_i_fu_246_p6;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 pProgramCounter_name_1 = 5'd0;
#0 pProgramCounter_form_1 = 6'd15;
#0 pProgramCounter_entr_1 = 7'd30;
end

singlecycle_riscvbkb #(
    .DataWidth( 3 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
instSet_entryIndex_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(instSet_entryIndex_V_address0),
    .ce0(instSet_entryIndex_V_ce0),
    .q0(instSet_entryIndex_V_q0)
);

singlecycle_riscvcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .din3_WIDTH( 7 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 7 ))
singlecycle_riscvcud_U1(
    .din0(7'd52),
    .din1(7'd3),
    .din2(7'd103),
    .din3(7'd103),
    .din4(merge_i_i_fu_246_p5),
    .dout(merge_i_i_fu_246_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_80 <= i_1_fu_105_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_80 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        pProgramCounter_entr_1 <= mem_index_gep4_fu_127_p2;
        pProgramCounter_form_1 <= mem_index_gep2_fu_121_p2;
        pProgramCounter_name_1 <= mem_index_gep_fu_115_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        instSet_entryIndex_V_ce0 = 1'b1;
    end else begin
        instSet_entryIndex_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addrCmp2_fu_155_p2 = ((pProgramCounter_entr_1 > 7'd29) ? 1'b1 : 1'b0);

assign addrCmp3_fu_161_p2 = ((pProgramCounter_entr_1 < 7'd45) ? 1'b1 : 1'b0);

assign adjSize14_cast_fu_151_p1 = pProgramCounter_entr_1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign exitcond_fu_99_p2 = ((i_reg_80 == 4'd15) ? 1'b1 : 1'b0);

assign gepindex1_fu_167_p2 = ($signed(8'd226) + $signed(adjSize14_cast_fu_151_p1));

assign gepindex220_cast_fu_189_p1 = $signed(gepindex3_fu_181_p3);

assign gepindex2_fu_173_p3 = ((addrCmp2_fu_155_p2[0:0] === 1'b1) ? gepindex1_fu_167_p2 : 8'd14);

assign gepindex3_fu_181_p3 = ((addrCmp3_fu_161_p2[0:0] === 1'b1) ? gepindex2_fu_173_p3 : 8'd14);

assign i_1_fu_105_p2 = (i_reg_80 + 4'd1);

assign immediate_V_ap_ack = 1'b0;

assign instSet_entryIndex_V_address0 = gepindex220_cast_fu_189_p1;

assign mem_index_gep2_fu_121_p2 = (pProgramCounter_form_1 + 6'd1);

assign mem_index_gep4_fu_127_p2 = (pProgramCounter_entr_1 + 7'd1);

assign mem_index_gep_fu_115_p2 = (pProgramCounter_name_1 + 5'd1);

assign merge_i_i_fu_246_p5 = instSet_entryIndex_V_q0[1:0];

assign startingInst_V_ap_ack = 1'b0;

endmodule //singlecycle_riscv
