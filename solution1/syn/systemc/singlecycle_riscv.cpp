// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "singlecycle_riscv.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic singlecycle_riscv::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic singlecycle_riscv::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> singlecycle_riscv::ap_ST_fsm_state1 = "1";
const sc_lv<3> singlecycle_riscv::ap_ST_fsm_state2 = "10";
const sc_lv<3> singlecycle_riscv::ap_ST_fsm_state3 = "100";
const sc_lv<32> singlecycle_riscv::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> singlecycle_riscv::ap_const_lv32_1 = "1";
const sc_lv<1> singlecycle_riscv::ap_const_lv1_1 = "1";
const sc_lv<4> singlecycle_riscv::ap_const_lv4_0 = "0000";
const sc_lv<1> singlecycle_riscv::ap_const_lv1_0 = "0";
const sc_lv<32> singlecycle_riscv::ap_const_lv32_2 = "10";
const sc_lv<4> singlecycle_riscv::ap_const_lv4_F = "1111";
const sc_lv<4> singlecycle_riscv::ap_const_lv4_1 = "1";
const sc_lv<5> singlecycle_riscv::ap_const_lv5_1 = "1";
const sc_lv<6> singlecycle_riscv::ap_const_lv6_1 = "1";
const sc_lv<7> singlecycle_riscv::ap_const_lv7_1 = "1";
const sc_lv<7> singlecycle_riscv::ap_const_lv7_1D = "11101";
const sc_lv<7> singlecycle_riscv::ap_const_lv7_2D = "101101";
const sc_lv<8> singlecycle_riscv::ap_const_lv8_E2 = "11100010";
const sc_lv<8> singlecycle_riscv::ap_const_lv8_E = "1110";
const sc_lv<7> singlecycle_riscv::ap_const_lv7_34 = "110100";
const sc_lv<7> singlecycle_riscv::ap_const_lv7_3 = "11";
const sc_lv<7> singlecycle_riscv::ap_const_lv7_67 = "1100111";
const bool singlecycle_riscv::ap_const_boolean_1 = true;

singlecycle_riscv::singlecycle_riscv(sc_module_name name) : sc_module(name), mVcdFile(0) {
    instSet_entryIndex_V_U = new singlecycle_riscvbkb("instSet_entryIndex_V_U");
    instSet_entryIndex_V_U->clk(ap_clk);
    instSet_entryIndex_V_U->reset(ap_rst);
    instSet_entryIndex_V_U->address0(instSet_entryIndex_V_address0);
    instSet_entryIndex_V_U->ce0(instSet_entryIndex_V_ce0);
    instSet_entryIndex_V_U->q0(instSet_entryIndex_V_q0);
    singlecycle_riscvcud_U1 = new singlecycle_riscvcud<1,1,7,7,7,7,2,7>("singlecycle_riscvcud_U1");
    singlecycle_riscvcud_U1->din0(ap_var_for_const0);
    singlecycle_riscvcud_U1->din1(ap_var_for_const1);
    singlecycle_riscvcud_U1->din2(ap_var_for_const2);
    singlecycle_riscvcud_U1->din3(ap_var_for_const2);
    singlecycle_riscvcud_U1->din4(merge_i_i_fu_246_p5);
    singlecycle_riscvcud_U1->dout(merge_i_i_fu_246_p6);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_addrCmp2_fu_155_p2);
    sensitive << ( pProgramCounter_entr_1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_99_p2 );

    SC_METHOD(thread_addrCmp3_fu_161_p2);
    sensitive << ( pProgramCounter_entr_1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_99_p2 );

    SC_METHOD(thread_adjSize14_cast_fu_151_p1);
    sensitive << ( pProgramCounter_entr_1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_exitcond_fu_99_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_80 );

    SC_METHOD(thread_gepindex1_fu_167_p2);
    sensitive << ( adjSize14_cast_fu_151_p1 );

    SC_METHOD(thread_gepindex220_cast_fu_189_p1);
    sensitive << ( gepindex3_fu_181_p3 );

    SC_METHOD(thread_gepindex2_fu_173_p3);
    sensitive << ( addrCmp2_fu_155_p2 );
    sensitive << ( gepindex1_fu_167_p2 );

    SC_METHOD(thread_gepindex3_fu_181_p3);
    sensitive << ( addrCmp3_fu_161_p2 );
    sensitive << ( gepindex2_fu_173_p3 );

    SC_METHOD(thread_i_1_fu_105_p2);
    sensitive << ( i_reg_80 );

    SC_METHOD(thread_immediate_V_ap_ack);

    SC_METHOD(thread_instSet_entryIndex_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( gepindex220_cast_fu_189_p1 );

    SC_METHOD(thread_instSet_entryIndex_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mem_index_gep2_fu_121_p2);
    sensitive << ( pProgramCounter_form_1 );

    SC_METHOD(thread_mem_index_gep4_fu_127_p2);
    sensitive << ( pProgramCounter_entr_1 );

    SC_METHOD(thread_mem_index_gep_fu_115_p2);
    sensitive << ( pProgramCounter_name_1 );

    SC_METHOD(thread_merge_i_i_fu_246_p5);
    sensitive << ( instSet_entryIndex_V_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_startingInst_V_ap_ack);

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_99_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "001";
    pProgramCounter_name_1 = "00000";
    pProgramCounter_form_1 = "001111";
    pProgramCounter_entr_1 = "0011110";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "singlecycle_riscv_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, startingInst_V, "(port)startingInst_V");
    sc_trace(mVcdFile, startingInst_V_ap_vld, "(port)startingInst_V_ap_vld");
    sc_trace(mVcdFile, startingInst_V_ap_ack, "(port)startingInst_V_ap_ack");
    sc_trace(mVcdFile, immediate_V, "(port)immediate_V");
    sc_trace(mVcdFile, immediate_V_ap_vld, "(port)immediate_V_ap_vld");
    sc_trace(mVcdFile, immediate_V_ap_ack, "(port)immediate_V_ap_ack");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, pProgramCounter_name_1, "pProgramCounter_name_1");
    sc_trace(mVcdFile, pProgramCounter_form_1, "pProgramCounter_form_1");
    sc_trace(mVcdFile, pProgramCounter_entr_1, "pProgramCounter_entr_1");
    sc_trace(mVcdFile, instSet_entryIndex_V_address0, "instSet_entryIndex_V_address0");
    sc_trace(mVcdFile, instSet_entryIndex_V_ce0, "instSet_entryIndex_V_ce0");
    sc_trace(mVcdFile, instSet_entryIndex_V_q0, "instSet_entryIndex_V_q0");
    sc_trace(mVcdFile, i_1_fu_105_p2, "i_1_fu_105_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_99_p2, "exitcond_fu_99_p2");
    sc_trace(mVcdFile, i_reg_80, "i_reg_80");
    sc_trace(mVcdFile, gepindex220_cast_fu_189_p1, "gepindex220_cast_fu_189_p1");
    sc_trace(mVcdFile, mem_index_gep_fu_115_p2, "mem_index_gep_fu_115_p2");
    sc_trace(mVcdFile, mem_index_gep2_fu_121_p2, "mem_index_gep2_fu_121_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, mem_index_gep4_fu_127_p2, "mem_index_gep4_fu_127_p2");
    sc_trace(mVcdFile, adjSize14_cast_fu_151_p1, "adjSize14_cast_fu_151_p1");
    sc_trace(mVcdFile, addrCmp2_fu_155_p2, "addrCmp2_fu_155_p2");
    sc_trace(mVcdFile, gepindex1_fu_167_p2, "gepindex1_fu_167_p2");
    sc_trace(mVcdFile, addrCmp3_fu_161_p2, "addrCmp3_fu_161_p2");
    sc_trace(mVcdFile, gepindex2_fu_173_p3, "gepindex2_fu_173_p3");
    sc_trace(mVcdFile, gepindex3_fu_181_p3, "gepindex3_fu_181_p3");
    sc_trace(mVcdFile, merge_i_i_fu_246_p5, "merge_i_i_fu_246_p5");
    sc_trace(mVcdFile, merge_i_i_fu_246_p6, "merge_i_i_fu_246_p6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("singlecycle_riscv.hdltvin.dat");
    mHdltvoutHandle.open("singlecycle_riscv.hdltvout.dat");
}

singlecycle_riscv::~singlecycle_riscv() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete instSet_entryIndex_V_U;
    delete singlecycle_riscvcud_U1;
}

void singlecycle_riscv::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv7_34;
}

void singlecycle_riscv::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv7_3;
}

void singlecycle_riscv::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv7_67;
}

void singlecycle_riscv::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_99_p2.read(), ap_const_lv1_0))) {
        i_reg_80 = i_1_fu_105_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_80 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_99_p2.read(), ap_const_lv1_0))) {
        pProgramCounter_entr_1 = mem_index_gep4_fu_127_p2.read();
        pProgramCounter_form_1 = mem_index_gep2_fu_121_p2.read();
        pProgramCounter_name_1 = mem_index_gep_fu_115_p2.read();
    }
}

void singlecycle_riscv::thread_addrCmp2_fu_155_p2() {
    addrCmp2_fu_155_p2 = (!pProgramCounter_entr_1.read().is_01() || !ap_const_lv7_1D.is_01())? sc_lv<1>(): (sc_biguint<7>(pProgramCounter_entr_1.read()) > sc_biguint<7>(ap_const_lv7_1D));
}

void singlecycle_riscv::thread_addrCmp3_fu_161_p2() {
    addrCmp3_fu_161_p2 = (!pProgramCounter_entr_1.read().is_01() || !ap_const_lv7_2D.is_01())? sc_lv<1>(): (sc_biguint<7>(pProgramCounter_entr_1.read()) < sc_biguint<7>(ap_const_lv7_2D));
}

void singlecycle_riscv::thread_adjSize14_cast_fu_151_p1() {
    adjSize14_cast_fu_151_p1 = esl_zext<8,7>(pProgramCounter_entr_1.read());
}

void singlecycle_riscv::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void singlecycle_riscv::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void singlecycle_riscv::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void singlecycle_riscv::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void singlecycle_riscv::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void singlecycle_riscv::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void singlecycle_riscv::thread_exitcond_fu_99_p2() {
    exitcond_fu_99_p2 = (!i_reg_80.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_80.read() == ap_const_lv4_F);
}

void singlecycle_riscv::thread_gepindex1_fu_167_p2() {
    gepindex1_fu_167_p2 = (!ap_const_lv8_E2.is_01() || !adjSize14_cast_fu_151_p1.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_E2) + sc_biguint<8>(adjSize14_cast_fu_151_p1.read()));
}

void singlecycle_riscv::thread_gepindex220_cast_fu_189_p1() {
    gepindex220_cast_fu_189_p1 = esl_sext<64,8>(gepindex3_fu_181_p3.read());
}

void singlecycle_riscv::thread_gepindex2_fu_173_p3() {
    gepindex2_fu_173_p3 = (!addrCmp2_fu_155_p2.read()[0].is_01())? sc_lv<8>(): ((addrCmp2_fu_155_p2.read()[0].to_bool())? gepindex1_fu_167_p2.read(): ap_const_lv8_E);
}

void singlecycle_riscv::thread_gepindex3_fu_181_p3() {
    gepindex3_fu_181_p3 = (!addrCmp3_fu_161_p2.read()[0].is_01())? sc_lv<8>(): ((addrCmp3_fu_161_p2.read()[0].to_bool())? gepindex2_fu_173_p3.read(): ap_const_lv8_E);
}

void singlecycle_riscv::thread_i_1_fu_105_p2() {
    i_1_fu_105_p2 = (!i_reg_80.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_80.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void singlecycle_riscv::thread_immediate_V_ap_ack() {
    immediate_V_ap_ack = ap_const_logic_0;
}

void singlecycle_riscv::thread_instSet_entryIndex_V_address0() {
    instSet_entryIndex_V_address0 =  (sc_lv<4>) (gepindex220_cast_fu_189_p1.read());
}

void singlecycle_riscv::thread_instSet_entryIndex_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        instSet_entryIndex_V_ce0 = ap_const_logic_1;
    } else {
        instSet_entryIndex_V_ce0 = ap_const_logic_0;
    }
}

void singlecycle_riscv::thread_mem_index_gep2_fu_121_p2() {
    mem_index_gep2_fu_121_p2 = (!pProgramCounter_form_1.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(pProgramCounter_form_1.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void singlecycle_riscv::thread_mem_index_gep4_fu_127_p2() {
    mem_index_gep4_fu_127_p2 = (!pProgramCounter_entr_1.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(pProgramCounter_entr_1.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void singlecycle_riscv::thread_mem_index_gep_fu_115_p2() {
    mem_index_gep_fu_115_p2 = (!pProgramCounter_name_1.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(pProgramCounter_name_1.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void singlecycle_riscv::thread_merge_i_i_fu_246_p5() {
    merge_i_i_fu_246_p5 = instSet_entryIndex_V_q0.read().range(2-1, 0);
}

void singlecycle_riscv::thread_startingInst_V_ap_ack() {
    startingInst_V_ap_ack = ap_const_logic_0;
}

void singlecycle_riscv::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_99_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void singlecycle_riscv::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"startingInst_V\" :  \"" << startingInst_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"startingInst_V_ap_vld\" :  \"" << startingInst_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"startingInst_V_ap_ack\" :  \"" << startingInst_V_ap_ack.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"immediate_V\" :  \"" << immediate_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"immediate_V_ap_vld\" :  \"" << immediate_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"immediate_V_ap_ack\" :  \"" << immediate_V_ap_ack.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

