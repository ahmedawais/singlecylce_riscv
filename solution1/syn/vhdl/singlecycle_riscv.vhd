-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity singlecycle_riscv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    startingInst_V : IN STD_LOGIC_VECTOR (31 downto 0);
    startingInst_V_ap_vld : IN STD_LOGIC;
    startingInst_V_ap_ack : OUT STD_LOGIC;
    immediate_V : IN STD_LOGIC_VECTOR (5 downto 0);
    immediate_V_ap_vld : IN STD_LOGIC;
    immediate_V_ap_ack : OUT STD_LOGIC );
end;


architecture behav of singlecycle_riscv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "singlecycle_riscv,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.494000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=28,HLS_SYN_LUT=172}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_1D : STD_LOGIC_VECTOR (6 downto 0) := "0011101";
    constant ap_const_lv7_2D : STD_LOGIC_VECTOR (6 downto 0) := "0101101";
    constant ap_const_lv8_E2 : STD_LOGIC_VECTOR (7 downto 0) := "11100010";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv7_34 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_67 : STD_LOGIC_VECTOR (6 downto 0) := "1100111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal pProgramCounter_name_1 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal pProgramCounter_form_1 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    signal pProgramCounter_entr_1 : STD_LOGIC_VECTOR (6 downto 0) := "0011110";
    signal instSet_entryIndex_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal instSet_entryIndex_V_ce0 : STD_LOGIC;
    signal instSet_entryIndex_V_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_fu_105_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal gepindex220_cast_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_index_gep_fu_115_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mem_index_gep2_fu_121_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mem_index_gep4_fu_127_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal adjSize14_cast_fu_151_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal addrCmp2_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex1_fu_167_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addrCmp3_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex2_fu_173_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal gepindex3_fu_181_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal merge_i_i_fu_246_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal merge_i_i_fu_246_p6 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component singlecycle_riscvcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (6 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component singlecycle_riscvbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    instSet_entryIndex_V_U : component singlecycle_riscvbkb
    generic map (
        DataWidth => 3,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => instSet_entryIndex_V_address0,
        ce0 => instSet_entryIndex_V_ce0,
        q0 => instSet_entryIndex_V_q0);

    singlecycle_riscvcud_U1 : component singlecycle_riscvcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        din4_WIDTH => 2,
        dout_WIDTH => 7)
    port map (
        din0 => ap_const_lv7_34,
        din1 => ap_const_lv7_3,
        din2 => ap_const_lv7_67,
        din3 => ap_const_lv7_67,
        din4 => merge_i_i_fu_246_p5,
        dout => merge_i_i_fu_246_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_80 <= i_1_fu_105_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_80 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                pProgramCounter_entr_1 <= mem_index_gep4_fu_127_p2;
                pProgramCounter_form_1 <= mem_index_gep2_fu_121_p2;
                pProgramCounter_name_1 <= mem_index_gep_fu_115_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_99_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    addrCmp2_fu_155_p2 <= "1" when (unsigned(pProgramCounter_entr_1) > unsigned(ap_const_lv7_1D)) else "0";
    addrCmp3_fu_161_p2 <= "1" when (unsigned(pProgramCounter_entr_1) < unsigned(ap_const_lv7_2D)) else "0";
    adjSize14_cast_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pProgramCounter_entr_1),8));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_99_p2 <= "1" when (i_reg_80 = ap_const_lv4_F) else "0";
    gepindex1_fu_167_p2 <= std_logic_vector(signed(ap_const_lv8_E2) + signed(adjSize14_cast_fu_151_p1));
        gepindex220_cast_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(gepindex3_fu_181_p3),64));

    gepindex2_fu_173_p3 <= 
        gepindex1_fu_167_p2 when (addrCmp2_fu_155_p2(0) = '1') else 
        ap_const_lv8_E;
    gepindex3_fu_181_p3 <= 
        gepindex2_fu_173_p3 when (addrCmp3_fu_161_p2(0) = '1') else 
        ap_const_lv8_E;
    i_1_fu_105_p2 <= std_logic_vector(unsigned(i_reg_80) + unsigned(ap_const_lv4_1));
    immediate_V_ap_ack <= ap_const_logic_0;
    instSet_entryIndex_V_address0 <= gepindex220_cast_fu_189_p1(4 - 1 downto 0);

    instSet_entryIndex_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            instSet_entryIndex_V_ce0 <= ap_const_logic_1;
        else 
            instSet_entryIndex_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_index_gep2_fu_121_p2 <= std_logic_vector(unsigned(pProgramCounter_form_1) + unsigned(ap_const_lv6_1));
    mem_index_gep4_fu_127_p2 <= std_logic_vector(unsigned(pProgramCounter_entr_1) + unsigned(ap_const_lv7_1));
    mem_index_gep_fu_115_p2 <= std_logic_vector(unsigned(pProgramCounter_name_1) + unsigned(ap_const_lv5_1));
    merge_i_i_fu_246_p5 <= instSet_entryIndex_V_q0(2 - 1 downto 0);
    startingInst_V_ap_ack <= ap_const_logic_0;
end behav;
